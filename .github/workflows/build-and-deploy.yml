name: Build and Deploy

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to docker Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Login to koyeb Registry
        run: echo "${{ secrets.KOYEB_REGISTRY_PASSWORD }}" | docker login -u '${{ secrets.KOYEB_REGISTRY_USERNAME }}' https://registry.prod.koyeb.com --password-stdin
      - name: Determine download URL for latest pack
        id: pack-download-url
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            return github.repos.getLatestRelease({
                owner: "buildpacks",
                repo: "pack"
            }).then(result => {
                return result.data.assets
                  .filter(a => a.name.includes("linux"))
                  .filter(a => !a.name.includes("arm64"))
                  .filter(a => !a.name.includes("s390x"))
                  .filter(a => !a.name.includes("ppc64"))
                  .map(a => a.browser_download_url)[0];
            })
      - name: Install pack
        run: |
          curl -s -L -o pack.tgz ${{ steps.pack-download-url.outputs.result }}
          tar -xvf pack.tgz
      - name: install yj
        run: |
          echo "Installing yj to /usr/local/bin"
          wget https://github.com/sclevine/yj/releases/download/v5.0.0/yj-linux -O /usr/local/bin/yj
          chmod a+x /usr/local/bin/yj
      - name: Build images
        run: |
          PACK_CMD=./pack make images
      - name: Publish images
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          # push heroku 22
          for version in "22"; do
            docker tag koyeb/pack:$version-cnb registry.prod.koyeb.com/koyeb/pack:$version-cnb
            docker tag koyeb/pack:$version-cnb-build registry.prod.koyeb.com/koyeb/pack:$version-cnb-build
            docker push koyeb/pack:$version-cnb
            docker push koyeb/pack:$version-cnb-build
            docker push registry.prod.koyeb.com/koyeb/pack:$version-cnb
            docker push registry.prod.koyeb.com/koyeb/pack:$version-cnb-build
          done
      - name: Build
        run: |
          PACK_CMD=./pack make build-heroku

          # patch stack registry for internal version
          REGISTRY=registry.prod.koyeb.com/koyeb make patch-builder-run-image
          REGISTRY=registry.prod.koyeb.com/koyeb PACK_CMD=./pack make build-heroku
      - name: Test builder
        run: |
          PACK_CMD=$PWD/pack make test
      - name: Publish beta buildpack
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: |
          # publish builder heroku-22 and flag as beta
          docker tag koyeb/builder:heroku-22 koyeb/builder:beta
          docker tag registry.prod.koyeb.com/koyeb/builder:heroku-22 registry.prod.koyeb.com/koyeb/builder:beta

          docker push koyeb/builder:beta
          docker push registry.prod.koyeb.com/koyeb/builder:beta
      - name: Publish buildpack
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          # publish builder heroku 22 is the default
          docker tag koyeb/builder:heroku-22 koyeb/builder:latest
          docker tag koyeb/builder:heroku-22 koyeb/builder:heroku
          docker tag registry.prod.koyeb.com/koyeb/builder:heroku-22 registry.prod.koyeb.com/koyeb/builder:latest
          docker tag registry.prod.koyeb.com/koyeb/builder:heroku-22 registry.prod.koyeb.com/koyeb/builder:heroku

          for tag in latest heroku heroku-22; do
            docker push koyeb/builder:$tag
            docker push registry.prod.koyeb.com/koyeb/builder:$tag
          done
      - name: Create Release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Clean up
        run: make clean
